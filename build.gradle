buildscript {
    ext.kotlin_version = '1.0.0-beta-4584'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'

group               = 'testgrp'
version             = '0.7.4-SNAPSHOT'
status              = 'integration'
description         = 'TODO - Pls. edit - Gradle bootstrap project for Quasar'

ext.classifier      = ':jdk8'
sourceCompatibility = 1.8     // 1.8
targetCompatibility = 1.8     // 1.8

ext.quasarVer       = '0.7.4-SNAPSHOT'
ext.junitVer        = '4.12'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

configurations {
    quasar
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/releases" }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://maven.java.net/content/repositories/snapshots' }
}

dependencies {
    compile "co.paralleluniverse:quasar-core:${quasarVer}${classifier}"
    compile "co.paralleluniverse:quasar-kotlin:${quasarVer}"

    quasar "co.paralleluniverse:quasar-core:${quasarVer}${classifier}@jar"

    testCompile "junit:junit:$junitVer"
}

test {
    beforeTest { desc ->
        logger.quiet("Running test: " + desc)
    }

    afterTest { desc, result ->
        if(result.resultType == TestResult.ResultType.FAILURE) {
            logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
            if(result.exception != null) {
                result.exception.printStackTrace()
            }
        }
    }
}

tasks.withType(Test) {
    useJUnit()
    systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'

    doLast() {
        println "file://" + getReports().getHtml().getDestination() + "/index.html"
    }
}

mainClassName = 'testgrp.QuasarIncreasingEchoAppKt'

if (project.hasProperty('method')) {
    apply from: "gradle/${project.getProperty('method')}.gradle"
} else {
    apply from: "gradle/agent.gradle"
}

defaultTasks 'test'
sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}
